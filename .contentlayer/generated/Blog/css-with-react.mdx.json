{
  "title": "How Should I Style My React Application?",
  "publishedAt": "2020-09-14",
  "summary": "Learn how CSS has evolved and explore pros and cons of different styling solutions for React.",
  "body": {
    "raw": "\nReact attempts to be as unopinionated as possible. This is both it's greatest strength _and_ weakness.\n\nOver the years, I've tried many different ways to style my React apps. Each solution has its pros and cons.\nThis article will share my journey using CSS with React and how it's evolved to its current state. Then, I'll discuss pros/cons of\ndifferent approaches for styling.\n\n## Vanilla CSS\n\nLike most, I started web development with vanilla CSS. All you need is a single HTML and CSS file. Pretty simple.\n\n```html title=\"index.html\"\n<h1 class=\"header\">Welcome</h1>\n```\n\n```css title=\"index.css\"\n.header {\n  font-size: 32px;\n}\n```\n\nAs I built more large applications, I began to understand some of the drawbacks.\n\n- **Reusability.**Â It's easy to create append-only stylesheets that become very complex.\n- **Global Namespace.**Â Since CSS has a [global namespace](https://css-tricks.com/regarding-css-global-scope/), you can unintentionally target too many elements.\n- **Colocation.** It's hard to modularize your CSS, which makes it difficult to delete code safely.\n\nAt this point, I was introduced to [CSS pre-processors](https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor).\nThese tools aim to introduce new funtionality and compile back to vanilla CSS.\n\n## Sass\n\n[Sass](https://sass-lang.com/), one of the most popular preprocessors, allows you to write more reusable, maintainable CSS.\nSome of the most popular features are [variables](https://sass-lang.com/documentation/variables), [mixins](https://sass-lang.com/documentation/at-rules/mixin), and [modules](https://sass-lang.com/documentation/modules).\n\n- **Variables.**Â I want to define global values once and share them throughout my stylesheets.\n- **Mixins.**Â I want to reuse particular snippets of CSS.\n- **Modules.**Â I want to split up my CSS files for a more maintainable codebase.\n\n```scss title=\"_base.scss\"\n$font-stack: Helvetica, sans-serif;\n$primary-color: #333;\n\nbody {\n  font: 100% $font-stack;\n  color: $primary-color;\n}\n```\n\n```scss title=\"_header.scss\"\n@use 'base';\n\n.header {\n  font-size: 32px;\n}\n```\n\nSass helped me write more modular, reusable CSS â€“ at least, for a while. Over time, I ran into new issues.\n\n- **Naming.**Â As your CSS grows, it's easy to have class names get out of hand.\n- **Browser support.**Â Certain features aren't [supported across all browsers](https://caniuse.com/) and require [vendor prefixes](https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix) like `-moz-` (Firefox), `-webkit-` (Safari), and `-ms-` (Internet Explorer and Edge).\n\nTo solve naming, I started to adoptÂ [BEM](http://getbem.com/introduction/).\nBlock Element Modifier is a methodology that helps you to create reusable components\nand organize CSS in a modular way, which keeps specificity low.\n\n```html\n<button class=\"button\">Cancel</button>\n<button class=\"button button--primary\">Submit</button>\n```\n\n```css\n.button {\n  color: black;\n  background-color: gray;\n}\n\n.button--primary {\n  color: white;\n  background-color: green;\n}\n```\n\nNaming conventions helped but didn't fix the root cause:Â **naming is hard**.\nFor browser support, it's possible to set up your Sass toolchain with a tool likeÂ [autoprefixer](https://css-tricks.com/autoprefixer/)Â to handle vendor prefixes.\nHowever, around this time, I started using component-based frameworks like React. This led me to explore CSS-in-JS.\n\n## CSS-in-JS\n\nI started using CSS-in-JS when building a component library. At first, CSS-in-JS solved all my problems.\n\n- **Specificity** is solved by auto-generated class names.\n- **Colocation** is solved by putting CSS directly with the component, making it easy to delete code.\n- **Browser support**Â is solved by having autoprefixer built-in.\n- **Variables**Â are solved by creating a global theme.\n\nHowever, **naming** was still a huge pain.\n\nAs the component library grew, I began to explore [Theme UI](https://theme-ui.com) and [styled-system](https://styled-system.com/).\nThese were more structured approaches to scaling CSS-in-JS to help enforce a design system.\nPlus, they helped solveÂ naming. Trying to scale [styled-components](https://styled-components.com/) alone in a large application made me get _really_ creative with names.\nYou can only have so many container, wrapper, layout things. For example:\n\n```js\nconst HomeContainerWrapper = styled.div`\nÂ  Â padding: 8px;\nÂ  Â font-weight: bold;\nÂ  Â color: white;\nÂ  Â background: blue;\n`;\n\n<HomeContainerWrapper>\nÂ Â Hello\n</HomeContainerWrapper>\n\n// Forget about naming\n<Box\nÂ Â padding={3}\nÂ Â fontWeight='bold'\nÂ Â color='white'\nÂ Â bg='blue'\n>\nÂ Â Hello\n</Box>\n```\n\nNow, I know what you're thinking. Inline styles ðŸ¤®. I'll admit, I wasn't sold at first. But it grew on me â€“ and that brings us to now.\n\n## Current State\n\nI've recently been working with [CSS Modules](https://github.com/css-modules/css-modules) and [Tailwind CSS](https://tailwindcss.com/).\nBoth of these approaches to styling React applications have prompted me to step back and evaluate the ecosystem.\n\nBelow, I've summarized pros and cons of various approaches to styling your React application. I tried to make this comparison as unopinionated as possible.\nThe choice that's best for you likely depends on:\n\n- Your experience (stick with what you know).\n- Your team.\n- The size of your application.\n- What you're trying to build.\n\n## Pros and Cons\n\n### Vanilla CSS\n\n<ProsCard\n  title=\"vanilla CSS\"\n  pros={[\n    `You don't want to add a toolchain. Vanilla CSS works with every browser & language.`,\n  ]}\n/>\n\n<ConsCard\n  title=\"vanilla CSS\"\n  cons={[`You're building a large web application.`]}\n/>\n\n### CSS Modules\n\n[CSS Modules](https://github.com/css-modules/css-modules) would be my choice for smaller teams that don't need to share\ncomponents across applications.\n\n[Next.js](https://nextjs.org) has support for CSS Modules, which means you don't have to worry about setting up [Webpack](https://webpack.js.org/).\nIt also sets up [autoprefixer](https://css-tricks.com/autoprefixer/) making CSS Modules an attractive alternative to CSS-in-JS in some cases.\n\n<ProsCard\n  title=\"CSS modules\"\n  pros={[\n    'You want class names scoped to the corresponding component.',\n    'You want to use CSS variables to reuse values.',\n    'You need your application to work without JavaScript.',\n    'You want the lowest barrier to entry.',\n    'You want to use any language, not just JavaScript.',\n  ]}\n/>\n\n<ConsCard\n  title=\"CSS modules\"\n  cons={[\n    `You don't want to configure a toolchain like Webpack.`,\n    'You need to distribute a package on NPM.',\n    'You want nesting support by default (requires PostCSS).',\n    `You don't want to context switch between files.`,\n  ]}\n/>\n\n### CSS-in-JS\n\nThere's many different CSS-in-JS libraries. The two most popular are [styled-components](https://styled-components.com/) and [Emotion](https://emotion.sh/docs/introduction).\n\nThere's also zero-runtime solutions like [Linaria](https://github.com/callstack/linaria), where CSS is extracted to CSS files at build-time.\nTo see comparisons between different libraries, see [CSS-in-JS benchmarks.](https://github.com/A-gambit/CSS-IN-JS-Benchmarks)\n\n<ProsCard\n  title=\"CSS-in-JS\"\n  pros={[\n    'You want to distribute as reusable components on NPM.',\n    'You want to take advantage of anything in the JavaScript ecosystem.',\n    'You want to colocate styles with components, making it easy to delete code.',\n    'You need to support multiple themes.',\n  ]}\n/>\n\n<ConsCard\n  title=\"CSS-in-JS\"\n  cons={[\n    `You don't want to configure a toolchain like Webpack.`,\n    'You are sick of figuring out names for things.',\n    'You believe it breaks separation of concerns.',\n    `You don't want to enforce all consumers must use the same CSS-in-JS solution.`,\n  ]}\n/>\n\n### Theme UI / Styled System\n\nBoth [Theme UI](https://theme-ui.com) and [styled-system](https://styled-system.com/) abide by the [System UI theme specification](https://system-ui.com/).\nThis specification intends to help make UI components, libraries, and tools as interoperable as possible.\n\nThe primary use case for these libraries is implenting a component library and design system.\nOne of my favorite libraries is [Chakra UI](https://next.chakra-ui.com/).\n\n<ProsCard\n  title=\"Theme UI / styled-system\"\n  pros={[\n    `You're building a component library.`,\n    'You need to enforce a design system.',\n    'You want to spend less time trying to name components.',\n  ]}\n/>\n\n<ConsCard\n  title=\"Theme UI / styled-system\"\n  cons={[\n    'You dislike providing styles as props.',\n    'You believe it breaks separation of concerns.',\n  ]}\n/>\n\n### Tailwind CSS\n\n[Tailwind CSS](https://tailwindcss.com/) has been rapidly growing in popularity. Many people are frustrated with the bloat of CSS frameworks like\n[Bootstrap](https://getbootstrap.com/) and want an alternative. Tailwind provides an impressive developer experience with a refined API.\n\nWith the combination of [Tailwind UI](https://tailwindui.com/), you can easily build extensible, well-designed applications.\n\n<ProsCard\n  title=\"Tailwind\"\n  pros={[\n    'You want to never leave your HTML (or JSX).',\n    'You need to enforce a design system.',\n    'You want to spend less time trying to name components.',\n  ]}\n/>\n\n<ConsCard\n  title=\"Tailwind\"\n  cons={[\n    `You don't want (potentially) long class names.`,\n    `You don't want to learn Tailwind syntax, which is slightly different than standard CSS.`,\n  ]}\n/>\n\n## Conclusion\n\nI hope this article has helped demystify styling your React applications. Did I miss anything or see something you'd change?\nLeave a comment below or reach out on [Twitter](https://twitter.com/leeerob).\n\n## Further Reading\n\n- [Switching to Tailwind CSS](/blog/tailwind)\n- [What are CSS Modules and why do we need them?](https://css-tricks.com/css-modules-part-1-need/)\n- [The Cost of JavaScript in 2019](https://v8.dev/blog/cost-of-javascript-2019)\n- [CSS-in-JS library comparisons](https://github.com/andreipfeiffer/css-in-js)\n- [Refactoring an alert component from CSS to CSS-in-JS](https://alert-refactor.netlify.app/)\n- [Two Steps Forward, One Step Back](https://jxnblk.com/blog/two-steps-forward/)\n",
    "code": "var Component=(()=>{var p=Object.create;var r=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,B=Object.prototype.hasOwnProperty;var g=(l,e)=>()=>(e||l((e={exports:{}}).exports,e),e.exports),f=(l,e)=>{for(var a in e)r(l,a,{get:e[a],enumerable:!0})},o=(l,e,a,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of m(e))!B.call(l,s)&&s!==a&&r(l,s,{get:()=>e[s],enumerable:!(t=y(e,s))||t.enumerable});return l};var S=(l,e,a)=>(a=l!=null?p(u(l)):{},o(e||!l||!l.__esModule?r(a,\"default\",{value:l,enumerable:!0}):a,l)),b=l=>o(r({},\"__esModule\",{value:!0}),l);var c=g((k,i)=>{i.exports=_jsx_runtime});var v={};f(v,{default:()=>A,frontmatter:()=>w});var n=S(c()),w={title:\"How Should I Style My React Application?\",publishedAt:\"2020-09-14\",summary:\"Learn how CSS has evolved and explore pros and cons of different styling solutions for React.\"};function d(l){let e=Object.assign({p:\"p\",em:\"em\",h2:\"h2\",a:\"a\",span:\"span\",div:\"div\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\",strong:\"strong\",h3:\"h3\"},l.components),{ProsCard:a,ConsCard:t}=e;return t||h(\"ConsCard\",!0),a||h(\"ProsCard\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"React attempts to be as unopinionated as possible. This is both it's greatest strength \",(0,n.jsx)(e.em,{children:\"and\"}),\" weakness.\"]}),`\n`,(0,n.jsx)(e.p,{children:`Over the years, I've tried many different ways to style my React apps. Each solution has its pros and cons.\nThis article will share my journey using CSS with React and how it's evolved to its current state. Then, I'll discuss pros/cons of\ndifferent approaches for styling.`}),`\n`,(0,n.jsxs)(e.h2,{id:\"vanilla-css\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#vanilla-css\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Vanilla CSS\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Like most, I started web development with vanilla CSS. All you need is a single HTML and CSS file. Pretty simple.\"}),`\n`,(0,n.jsxs)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:[(0,n.jsx)(e.div,{\"data-rehype-pretty-code-title\":\"\",\"data-language\":\"html\",\"data-theme\":\"default\",children:\"index.html\"}),(0,n.jsx)(e.pre,{style:{backgroundColor:\"#282c34\"},tabIndex:\"0\",\"data-language\":\"html\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"html\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"<\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"h1\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"class\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"header\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">Welcome</\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"h1\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">\"})]})})})]}),`\n`,(0,n.jsxs)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:[(0,n.jsx)(e.div,{\"data-rehype-pretty-code-title\":\"\",\"data-language\":\"css\",\"data-theme\":\"default\",children:\"index.css\"}),(0,n.jsx)(e.pre,{style:{backgroundColor:\"#282c34\"},tabIndex:\"0\",\"data-language\":\"css\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"css\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\".header\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  font-size: \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"32\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"px\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})]}),`\n`,(0,n.jsx)(e.p,{children:\"As I built more large applications, I began to understand some of the drawbacks.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Reusability.\"}),\"\\xA0It's easy to create append-only stylesheets that become very complex.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Global Namespace.\"}),\"\\xA0Since CSS has a \",(0,n.jsx)(e.a,{href:\"https://css-tricks.com/regarding-css-global-scope/\",children:\"global namespace\"}),\", you can unintentionally target too many elements.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Colocation.\"}),\" It's hard to modularize your CSS, which makes it difficult to delete code safely.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"At this point, I was introduced to \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Glossary/CSS_preprocessor\",children:\"CSS pre-processors\"}),`.\nThese tools aim to introduce new funtionality and compile back to vanilla CSS.`]}),`\n`,(0,n.jsxs)(e.h2,{id:\"sass\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#sass\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Sass\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://sass-lang.com/\",children:\"Sass\"}),`, one of the most popular preprocessors, allows you to write more reusable, maintainable CSS.\nSome of the most popular features are `,(0,n.jsx)(e.a,{href:\"https://sass-lang.com/documentation/variables\",children:\"variables\"}),\", \",(0,n.jsx)(e.a,{href:\"https://sass-lang.com/documentation/at-rules/mixin\",children:\"mixins\"}),\", and \",(0,n.jsx)(e.a,{href:\"https://sass-lang.com/documentation/modules\",children:\"modules\"}),\".\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Variables.\"}),\"\\xA0I want to define global values once and share them throughout my stylesheets.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Mixins.\"}),\"\\xA0I want to reuse particular snippets of CSS.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Modules.\"}),\"\\xA0I want to split up my CSS files for a more maintainable codebase.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:[(0,n.jsx)(e.div,{\"data-rehype-pretty-code-title\":\"\",\"data-language\":\"scss\",\"data-theme\":\"default\",children:\"_base.scss\"}),(0,n.jsx)(e.pre,{style:{backgroundColor:\"#282c34\"},tabIndex:\"0\",\"data-language\":\"scss\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"scss\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"$font-stack\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"Helvetica\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"sans-serif\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"$primary-color\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"#333\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:\" \"}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"body\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"font\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"100\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"%\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"$font-stack\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  color: \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"$primary-color\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})]}),`\n`,(0,n.jsxs)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:[(0,n.jsx)(e.div,{\"data-rehype-pretty-code-title\":\"\",\"data-language\":\"scss\",\"data-theme\":\"default\",children:\"_header.scss\"}),(0,n.jsx)(e.pre,{style:{backgroundColor:\"#282c34\"},tabIndex:\"0\",\"data-language\":\"scss\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"scss\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"@use\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\"'base'\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:\" \"}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\".header\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  font-size: \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"32\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"px\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})]}),`\n`,(0,n.jsx)(e.p,{children:\"Sass helped me write more modular, reusable CSS \\u2013 at least, for a while. Over time, I ran into new issues.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Naming.\"}),\"\\xA0As your CSS grows, it's easy to have class names get out of hand.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Browser support.\"}),\"\\xA0Certain features aren't \",(0,n.jsx)(e.a,{href:\"https://caniuse.com/\",children:\"supported across all browsers\"}),\" and require \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\",children:\"vendor prefixes\"}),\" like \",(0,n.jsx)(e.code,{children:\"-moz-\"}),\" (Firefox), \",(0,n.jsx)(e.code,{children:\"-webkit-\"}),\" (Safari), and \",(0,n.jsx)(e.code,{children:\"-ms-\"}),\" (Internet Explorer and Edge).\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To solve naming, I started to adopt\\xA0\",(0,n.jsx)(e.a,{href:\"http://getbem.com/introduction/\",children:\"BEM\"}),`.\nBlock Element Modifier is a methodology that helps you to create reusable components\nand organize CSS in a modular way, which keeps specificity low.`]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{style:{backgroundColor:\"#282c34\"},tabIndex:\"0\",\"data-language\":\"html\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"html\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"<\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"button\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"class\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"button\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">Cancel</\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"button\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"<\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"button\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"class\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"button button--primary\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">Submit</\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"button\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">\"})]})]})})}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{style:{backgroundColor:\"#282c34\"},tabIndex:\"0\",\"data-language\":\"css\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"css\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\".button\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  color: \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"black\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  background-color: \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"gray\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:\" \"}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\".button--primary\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  color: \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"white\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  background-color: \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"green\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Naming conventions helped but didn't fix the root cause:\\xA0\",(0,n.jsx)(e.strong,{children:\"naming is hard\"}),`.\nFor browser support, it's possible to set up your Sass toolchain with a tool like\\xA0`,(0,n.jsx)(e.a,{href:\"https://css-tricks.com/autoprefixer/\",children:\"autoprefixer\"}),`\\xA0to handle vendor prefixes.\nHowever, around this time, I started using component-based frameworks like React. This led me to explore CSS-in-JS.`]}),`\n`,(0,n.jsxs)(e.h2,{id:\"css-in-js\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#css-in-js\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"CSS-in-JS\"]}),`\n`,(0,n.jsx)(e.p,{children:\"I started using CSS-in-JS when building a component library. At first, CSS-in-JS solved all my problems.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Specificity\"}),\" is solved by auto-generated class names.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Colocation\"}),\" is solved by putting CSS directly with the component, making it easy to delete code.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Browser support\"}),\"\\xA0is solved by having autoprefixer built-in.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Variables\"}),\"\\xA0are solved by creating a global theme.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"However, \",(0,n.jsx)(e.strong,{children:\"naming\"}),\" was still a huge pain.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"As the component library grew, I began to explore \",(0,n.jsx)(e.a,{href:\"https://theme-ui.com\",children:\"Theme UI\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://styled-system.com/\",children:\"styled-system\"}),`.\nThese were more structured approaches to scaling CSS-in-JS to help enforce a design system.\nPlus, they helped solve\\xA0naming. Trying to scale `,(0,n.jsx)(e.a,{href:\"https://styled-components.com/\",children:\"styled-components\"}),\" alone in a large application made me get \",(0,n.jsx)(e.em,{children:\"really\"}),` creative with names.\nYou can only have so many container, wrapper, layout things. For example:`]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{style:{backgroundColor:\"#282c34\"},tabIndex:\"0\",\"data-language\":\"js\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"js\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"const\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"HomeContainerWrapper\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"styled\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\".\"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"div\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\"`\"})]}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\"\\xA0 \\xA0padding: 8px;\"})}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\"\\xA0 \\xA0font-weight: bold;\"})}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\"\\xA0 \\xA0color: white;\"})}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\"\\xA0 \\xA0background: blue;\"})}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\"`\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:\" \"}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"<\"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"HomeContainerWrapper\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">\"})]}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\\xA0\\xA0Hello\"})}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"</\"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"HomeContainerWrapper\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">\"})]}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:\" \"}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:(0,n.jsx)(e.span,{style:{color:\"#7F848E\",fontStyle:\"italic\"},children:\"// Forget about naming\"})}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"<\"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"Box\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\\xA0\\xA0\"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"padding\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"3\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\\xA0\\xA0\"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"fontWeight\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\"'bold'\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\\xA0\\xA0\"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"color\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\"'white'\"})]}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\\xA0\\xA0\"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"bg\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\"'blue'\"})]}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">\"})}),`\n`,(0,n.jsx)(e.span,{\"data-line\":\"\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"\\xA0\\xA0Hello\"})}),`\n`,(0,n.jsxs)(e.span,{\"data-line\":\"\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"</\"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"Box\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">\"})]})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"Now, I know what you're thinking. Inline styles \\u{1F92E}. I'll admit, I wasn't sold at first. But it grew on me \\u2013 and that brings us to now.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"current-state\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#current-state\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Current State\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I've recently been working with \",(0,n.jsx)(e.a,{href:\"https://github.com/css-modules/css-modules\",children:\"CSS Modules\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://tailwindcss.com/\",children:\"Tailwind CSS\"}),`.\nBoth of these approaches to styling React applications have prompted me to step back and evaluate the ecosystem.`]}),`\n`,(0,n.jsx)(e.p,{children:`Below, I've summarized pros and cons of various approaches to styling your React application. I tried to make this comparison as unopinionated as possible.\nThe choice that's best for you likely depends on:`}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Your experience (stick with what you know).\"}),`\n`,(0,n.jsx)(e.li,{children:\"Your team.\"}),`\n`,(0,n.jsx)(e.li,{children:\"The size of your application.\"}),`\n`,(0,n.jsx)(e.li,{children:\"What you're trying to build.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.h2,{id:\"pros-and-cons\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#pros-and-cons\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Pros and Cons\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"vanilla-css-1\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#vanilla-css-1\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Vanilla CSS\"]}),`\n`,(0,n.jsx)(a,{title:\"vanilla CSS\",pros:[\"You don't want to add a toolchain. Vanilla CSS works with every browser & language.\"]}),`\n`,(0,n.jsx)(t,{title:\"vanilla CSS\",cons:[\"You're building a large web application.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"css-modules\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#css-modules\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"CSS Modules\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/css-modules/css-modules\",children:\"CSS Modules\"}),` would be my choice for smaller teams that don't need to share\ncomponents across applications.`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://nextjs.org\",children:\"Next.js\"}),\" has support for CSS Modules, which means you don't have to worry about setting up \",(0,n.jsx)(e.a,{href:\"https://webpack.js.org/\",children:\"Webpack\"}),`.\nIt also sets up `,(0,n.jsx)(e.a,{href:\"https://css-tricks.com/autoprefixer/\",children:\"autoprefixer\"}),\" making CSS Modules an attractive alternative to CSS-in-JS in some cases.\"]}),`\n`,(0,n.jsx)(a,{title:\"CSS modules\",pros:[\"You want class names scoped to the corresponding component.\",\"You want to use CSS variables to reuse values.\",\"You need your application to work without JavaScript.\",\"You want the lowest barrier to entry.\",\"You want to use any language, not just JavaScript.\"]}),`\n`,(0,n.jsx)(t,{title:\"CSS modules\",cons:[\"You don't want to configure a toolchain like Webpack.\",\"You need to distribute a package on NPM.\",\"You want nesting support by default (requires PostCSS).\",\"You don't want to context switch between files.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"css-in-js-1\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#css-in-js-1\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"CSS-in-JS\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"There's many different CSS-in-JS libraries. The two most popular are \",(0,n.jsx)(e.a,{href:\"https://styled-components.com/\",children:\"styled-components\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://emotion.sh/docs/introduction\",children:\"Emotion\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"There's also zero-runtime solutions like \",(0,n.jsx)(e.a,{href:\"https://github.com/callstack/linaria\",children:\"Linaria\"}),`, where CSS is extracted to CSS files at build-time.\nTo see comparisons between different libraries, see `,(0,n.jsx)(e.a,{href:\"https://github.com/A-gambit/CSS-IN-JS-Benchmarks\",children:\"CSS-in-JS benchmarks.\"})]}),`\n`,(0,n.jsx)(a,{title:\"CSS-in-JS\",pros:[\"You want to distribute as reusable components on NPM.\",\"You want to take advantage of anything in the JavaScript ecosystem.\",\"You want to colocate styles with components, making it easy to delete code.\",\"You need to support multiple themes.\"]}),`\n`,(0,n.jsx)(t,{title:\"CSS-in-JS\",cons:[\"You don't want to configure a toolchain like Webpack.\",\"You are sick of figuring out names for things.\",\"You believe it breaks separation of concerns.\",\"You don't want to enforce all consumers must use the same CSS-in-JS solution.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"theme-ui--styled-system\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#theme-ui--styled-system\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Theme UI / Styled System\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Both \",(0,n.jsx)(e.a,{href:\"https://theme-ui.com\",children:\"Theme UI\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://styled-system.com/\",children:\"styled-system\"}),\" abide by the \",(0,n.jsx)(e.a,{href:\"https://system-ui.com/\",children:\"System UI theme specification\"}),`.\nThis specification intends to help make UI components, libraries, and tools as interoperable as possible.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`The primary use case for these libraries is implenting a component library and design system.\nOne of my favorite libraries is `,(0,n.jsx)(e.a,{href:\"https://next.chakra-ui.com/\",children:\"Chakra UI\"}),\".\"]}),`\n`,(0,n.jsx)(a,{title:\"Theme UI / styled-system\",pros:[\"You're building a component library.\",\"You need to enforce a design system.\",\"You want to spend less time trying to name components.\"]}),`\n`,(0,n.jsx)(t,{title:\"Theme UI / styled-system\",cons:[\"You dislike providing styles as props.\",\"You believe it breaks separation of concerns.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"tailwind-css\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#tailwind-css\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Tailwind CSS\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://tailwindcss.com/\",children:\"Tailwind CSS\"}),` has been rapidly growing in popularity. Many people are frustrated with the bloat of CSS frameworks like\n`,(0,n.jsx)(e.a,{href:\"https://getbootstrap.com/\",children:\"Bootstrap\"}),\" and want an alternative. Tailwind provides an impressive developer experience with a refined API.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"With the combination of \",(0,n.jsx)(e.a,{href:\"https://tailwindui.com/\",children:\"Tailwind UI\"}),\", you can easily build extensible, well-designed applications.\"]}),`\n`,(0,n.jsx)(a,{title:\"Tailwind\",pros:[\"You want to never leave your HTML (or JSX).\",\"You need to enforce a design system.\",\"You want to spend less time trying to name components.\"]}),`\n`,(0,n.jsx)(t,{title:\"Tailwind\",cons:[\"You don't want (potentially) long class names.\",\"You don't want to learn Tailwind syntax, which is slightly different than standard CSS.\"]}),`\n`,(0,n.jsxs)(e.h2,{id:\"conclusion\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#conclusion\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Conclusion\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`I hope this article has helped demystify styling your React applications. Did I miss anything or see something you'd change?\nLeave a comment below or reach out on `,(0,n.jsx)(e.a,{href:\"https://twitter.com/leeerob\",children:\"Twitter\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h2,{id:\"further-reading\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#further-reading\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Further Reading\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"/blog/tailwind\",children:\"Switching to Tailwind CSS\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://css-tricks.com/css-modules-part-1-need/\",children:\"What are CSS Modules and why do we need them?\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://v8.dev/blog/cost-of-javascript-2019\",children:\"The Cost of JavaScript in 2019\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/andreipfeiffer/css-in-js\",children:\"CSS-in-JS library comparisons\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://alert-refactor.netlify.app/\",children:\"Refactoring an alert component from CSS to CSS-in-JS\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://jxnblk.com/blog/two-steps-forward/\",children:\"Two Steps Forward, One Step Back\"})}),`\n`]})]})}function C(l={}){let{wrapper:e}=l.components||{};return e?(0,n.jsx)(e,Object.assign({},l,{children:(0,n.jsx)(d,l)})):d(l)}var A=C;function h(l,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+l+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return b(v);})();\n;return Component;"
  },
  "_id": "css-with-react.mdx",
  "_raw": {
    "sourceFilePath": "css-with-react.mdx",
    "sourceFileName": "css-with-react.mdx",
    "sourceFileDir": ".",
    "contentType": "mdx",
    "flattenedPath": "css-with-react"
  },
  "type": "Blog",
  "slug": "css-with-react",
  "tweetIds": [],
  "structuredData": {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": "How Should I Style My React Application?",
    "datePublished": "2020-09-14",
    "dateModified": "2020-09-14",
    "description": "Learn how CSS has evolved and explore pros and cons of different styling solutions for React.",
    "image": "https://homescree.net/og?title=How Should I Style My React Application?",
    "url": "https://homescree.net/blog/css-with-react",
    "author": {
      "@type": "Person",
      "name": "Matthew Guo"
    }
  }
}