{
  "title": "Why You Should Use a React Framework",
  "publishedAt": "2023-01-05",
  "summary": "And spend more time writing React code.",
  "body": {
    "raw": "\nAnalyzing the [top 10,000 publicly accessible](https://majestic.com/reports/majestic-million) websites on the internet, we see an interesting trend: **~6%** are now built with React frameworks¹.\n\n<StaticTweet id=\"1604880119666905088\" />\n\nYou should consider using a framework (instead of building your own) because:\n\n1.  Less time connecting tools, more time building products\n2.  Easier onboarding and training of new developers\n3.  Flexibility for different rendering strategies (server, client, or static)\n4.  Opinionated choices prevent bikeshedding\n5.  Deploy anywhere and incrementally adopt\n6.  It's still just React\n\nBut before we explore why you should use a framework, it's helpful to step back and look at the evolution of React.\n\n## React is evolving\n\nReact changed how developers build for the web, popularizing breaking down UI into reusable components and emphasizing incremental adoption.\n\nWhile it's certainly still a library that can be [sprinkled into any webpage](https://beta.reactjs.org/learn/add-react-to-a-website), the **React architecture** is a blueprint for frameworks to follow to create interactive, resilient, and performant [frontend patterns](https://github.com/reactwg/react-18/discussions/37).\n\n<Image\n  alt={`React has evolved from a library to also provide an architecture for frameworks.`}\n  src={`/images/react-frameworks/evolving.jpg`}\n  width={1456 / 2}\n  height={819 / 2}\n/>\n\nConsider [React Server Components](https://beta.nextjs.org/docs/rendering/server-and-client-components). This architecture is designed for frameworks to implement. Some aspects have been standardized between React frameworks (e.g. [\"use client\"](https://github.com/reactjs/rfcs/pull/227)) and others are being incubated (e.g. [async/await in Server Components](https://github.com/reactjs/rfcs/pull/229)) during [beta periods](https://nextjs.org/blog/next-13#new-app-directory-beta). Frameworks can still choose their own conventions (e.g. [special filenames](https://beta.nextjs.org/docs/routing/fundamentals#special-files)).\n\nImplementing the React architecture, and ultimately great UI patterns, requires deep integration between all parts of your frontend: data fetching and loading states, code splitting and bundling, routing and rendering, and more.\n\nThis is where frameworks come in.\n\n<StaticTweet id=\"1585076899126345728\" />\n_P.S. I talked about this evolution during the [Reactathon keynote](https://www.youtube.com/watch?v=XruemT74Nok&list=PLRvKvw42Rc7O0eWo2m_guXdZsGTEQM_jj)._\n\n## Less time connecting tools, more time building products\n\nReact has been around for almost [10 years](<https://en.wikipedia.org/wiki/React_(JavaScript_library)>) – and the web has grown with it.\n\nEvery aspect of frontend development has seen innovation: linting, formatting, compiling, bundling, minifying, deploying, and more. Developers want to spend less time configuring their tooling and more time writing React code, while still taking advantage of these latest advancements.\n\nTeams who build with React frameworks can focus on components and business logic, and lean on battle-tested open-source solutions for routing, rendering, data fetching, styling, authentication, testing, and more.\n\n<Image\n  alt={`An iceberg of react frameworks, showing that while most of the time it seems it's just components and business logic, the reality is that under water there are many other things frameworks are handling for you, like authentication, rendering, routing, state management, i18n, styling, and more.`}\n  src={`/images/react-frameworks/iceberg.png`}\n  width={2478 / 3}\n  height={2784 / 3}\n/>\n\nFurther, teams can [update to the latest versions](https://vercel.com/blog/upgrading-nextjs-for-instant-performance-improvements) of these frameworks and instantly receive both performance benefits and new tools to help them improve the end-user experience. In some cases, you [add a command line flag](https://twitter.com/leeerob/status/1607461222584291328) and take advantage of multi-year and multi-million dollar investments into [Rust-based JavaScript tooling](https://leerob.io/blog/rust). It's harder to justify investments into developer experience and tooling when building an internal framework (for most teams).\n\n## Easier onboarding and training of new developers\n\nFrameworks help you [spend more time writing React code](https://twitter.com/getDanArias/status/1607727505217294341).\n\nCompiling, bundling, minifying, code splitting, server-rendering, routing – by using a framework, your team spends less time building and maintaining solutions that are solved problems.\n\nFor example, [moving from React + Express + Webpack to a framework](https://vercel.com/blog/migrating-a-large-open-source-react-application-to-next-js-and-vercel) resulted in removing **20,000+ lines of code** and **30+ dependencies** – while improving HMR (Hot Module Reloading) from **1.3s to 131ms**.\n\nCompanies who choose to build with open-source React frameworks benefit from:\n\n- **Immediate knowledge ramp-up:** New engineers can ship code on day one, bringing existing knowledge of popular frameworks from their last role or hobby projects.\n- **Up-to-date documentation:** When developers are stuck, they're able to reference documentation that's updated daily or [easily search Stack Overflow for their stack trace](https://twitter.com/rauchg/status/1605997497976885248)².\n- **Best-in-class security:** Bugs and security vulnerabilities are reported and patched by communities of [thousands of developers](https://twitter.com/rauchg/status/1604880119666905088) instead of overworked platform teams.\n\nMeta (the creators of React) have their own closed-source web framework. Many innovations in React have come from years of dogfooding new features (like [Server Components](https://beta.nextjs.org/docs/rendering/server-and-client-components)) on [Facebook.com](http://facebook.com/) through this framework.\n\nUsing an open-source React framework, built on top of the latest React UI primitives, is the closest way to emulate the tools developers at Facebook use to build one of the largest web applications in the world.\n\n## Flexibility for different rendering strategies\n\nReact, by itself, is primarily used on the client (in the browser).\n\nIn a standard React application, the browser receives an empty HTML shell from the server along with JavaScript instructions to construct the UI. This is called [client-side rendering](https://nextjs.org/learn/foundations/how-nextjs-works/client-and-server) because the initial rendering work happens on the user's device.\n\nWhile this is a valid pattern for certain types of applications (especially those behind a login), React's widespread usage for any type of web page made developers also want to [prerender](https://nextjs.org/learn/foundations/how-nextjs-works/rendering) content from the server. The HTML is generated in advance rather than computed on the user's device.\n\nSending HTML from the server (or how most sites work) can provide some benefits:\n\n1.  It's typically faster to do expensive work on a powerful server than on a user's device.\n2.  It's a better user experience to see more content on the initial paint versus a loading spinner.\n3.  It's a better user experience when running A/B tests or experiments, preventing layout shifts.\n\nReact does give you [APIs to render content to HTML](https://beta.reactjs.org/reference/react-dom/server/renderToPipeableStream), which might work for your use case. However, the developer is still left with connecting many pieces together for the rest of the application experience. This is where frameworks provide a cohesive experience on top of React when you need to prerender content.\n\nIt might sound like all React apps should be server-rendered. The reality is, of course, more nuanced. For certain routes, it's likely better to generate a static asset and distribute it around the world using an [Edge Network](https://vercel.com/docs/concepts/edge-network/overview) (placing the assets closer to your users).\n\nFor other pages, the client-only model might be better. You can download the JavaScript for the page _once_, cache the assets on the device (which have a unique hash in the file name for the given version), and then quickly navigate between pages (giving you the single-page application feel). This might be a better solution for applications that require offline support.\n\nThere's no silver bullet or single rendering strategy that works. Static, server, or client rendered – all are valid options depending on the requirements. Frameworks can empower you to make this decision on a per-route basis, rather than needing to make the _entire_ application a static site or server-rendered.\n\n## Opinionated choices prevent bikeshedding\n\nPicking React is **one decision** of _many_ frontend architecture choices.\n\nYou will likely also need to consider:\n\n- How should we handle routing? (i.e. using the file system or through some configuration)\n- How should we only load the JavaScript needed for the current page? (i.e. code splitting)\n- How should we prevent regressions in our codebase? (e.g. using conformance and linting)\n- How should we load data for a given page? (i.e. server or client)\n- How should we deploy our React application? (e.g. using Docker, Node.js, or static files)\n- How should we style our code? (e.g. CSS modules, Tailwind CSS, etc.)\n- How should we handle authentication?\n\nFrameworks make many of these decisions for you, as well as provide you with tools and components to solve common problems on the web. For example, you will probably need to use [images](https://nextjs.org/docs/basic-features/image-optimization), [fonts](https://nextjs.org/docs/basic-features/font-optimization), or [third-party scripts](https://nextjs.org/docs/basic-features/script) when building a website. Frameworks can give you tools to help optimize your usage of these primitives, building on top of [React, JavaScript, and the web platform](https://leerob.substack.com/p/why-im-optimistic-about-javascripts).\n\nBuilding with an open-source framework that's well adopted gives you access to many contributors creating, maintaining, and documenting common issues – codifying them into conformance rules and [ESLint configurations](https://nextjs.org/docs/basic-features/eslint#eslint-config). There are sometimes even suggestions built into common web performance measurement tools like [Lighthouse](https://twitter.com/leeerob/status/1506332606371086338).\n\nIt's important for frameworks to be opinionated, but still have ways to eject or give access to the underlying primitives to allow developers to not feel a loss of control. For example, maybe this is a [robust plugin system](https://github.com/vitejs/awesome-vite#plugins), or maybe this is running [arbitrary routing logic before each request](https://nextjs.org/docs/advanced-features/middleware).\n\n## Deploy anywhere and incrementally adopt\n\nIt's not uncommon to have internal platform teams supporting the delivery of bespoke React applications at larger companies. Since their tooling is not built on established, open platforms, developers often end up wasting time working on solved infrastructure problems.\n\nOne of the benefits of using a framework is that they all have support for either self-hosting on your own infrastructure (either through Docker, Node.js, or other means like uploading static assets) or by using [managed platforms](https://twitter.com/leeerob/status/1583529921153900545), which automate every process of the [iteration](https://techcrunch.com/2022/12/20/vercel-makes-it-easier-to-collaborate-on-preview-deployments) and delivery of the software.\n\nAdditionally, many React frameworks have extensive documentation on how to incrementally adopt their tool, including providing low-level features like [URL proxies](https://nextjs.org/docs/advanced-features/middleware), allowing you to rewrite some incoming requests to your new framework to your existing application.\n\n## It's still just React\n\nWhile frameworks provide abstractions and opinionated choices, at the end of the day, you spend the majority of your time writing React code. And that React code is portable between other React-based frameworks. This optionality is great for developers.\n\nFurther, React frameworks are increasingly aligned with the [web platform](https://leerob.substack.com/p/why-im-optimistic-about-javascripts). As patterns for building React applications have emerged and solidified, we're now seeing stronger recommendations from both the [official React documentation](https://beta.reactjs.org/), as well as frameworks and libraries in the community.\n\nWhile the innovation in the React and single-page application space has been abundant, we're now seeing frameworks use the best of the client, and the best of the server, all while taking full advantage of the web platform.\n\n## Conclusion\n\nReact has evolved. It's now a:\n\n- **Library:** Sprinkle interactivity into any webpage\n- **Architecture:** UI patterns and primitives for frameworks to build with\n- **Community:** Well used and documented, incrementally adoptable\n- **Ecosystem:** Learn once, write everywhere (web, [native](https://reactnative.dev/), [3D](https://docs.pmnd.rs/react-three-fiber/getting-started/introduction), and more)\n\nIf you're building with React, **you should probably use a framework** to spend more time writing product code, and less time connecting toolchains. The specific framework you use doesn't matter as much as the benefits from not reinventing the wheel building your own.\n\n---\n\n¹: The two React frameworks in the 6% were Next.js and Gatsby. There are other React frameworks, but these were the only detected (looking at `__next` element for Next.js and `___gatsby` for Gatsby) in the top 10,000. Also, side note, Next.js [has passed CRA](https://twitter.com/github_tracker/status/1610165503468658689) now.\n\n²: Or you can use ChatGPT (ironically [built with Next.js](https://twitter.com/rauchg/status/1598440645680828416)) to [generate a React site](https://twitter.com/leeerob/status/1598738172879437824) entirely with AI.\n",
    "code": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var i in e)a(n,i,{get:e[i],enumerable:!0})},s=(n,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!f.call(n,o)&&o!==i&&a(n,o,{get:()=>e[o],enumerable:!(r=m(e,o))||r.enumerable});return n};var v=(n,e,i)=>(i=n!=null?p(g(n)):{},s(e||!n||!n.__esModule?a(i,\"default\",{value:n,enumerable:!0}):i,n)),y=n=>s(a({},\"__esModule\",{value:!0}),n);var c=w((N,l)=>{l.exports=_jsx_runtime});var j={};b(j,{default:()=>x,frontmatter:()=>k});var t=v(c()),k={title:\"Why You Should Use a React Framework\",publishedAt:\"2023-01-05\",summary:\"And spend more time writing React code.\"};function h(n){let e=Object.assign({p:\"p\",a:\"a\",strong:\"strong\",ol:\"ol\",li:\"li\",h2:\"h2\",span:\"span\",em:\"em\",ul:\"ul\",hr:\"hr\",code:\"code\"},n.components),{StaticTweet:i,Image:r}=e;return r||d(\"Image\",!0),i||d(\"StaticTweet\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Analyzing the \",(0,t.jsx)(e.a,{href:\"https://majestic.com/reports/majestic-million\",children:\"top 10,000 publicly accessible\"}),\" websites on the internet, we see an interesting trend: \",(0,t.jsx)(e.strong,{children:\"~6%\"}),\" are now built with React frameworks\\xB9.\"]}),`\n`,(0,t.jsx)(i,{id:\"1604880119666905088\"}),`\n`,(0,t.jsx)(e.p,{children:\"You should consider using a framework (instead of building your own) because:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Less time connecting tools, more time building products\"}),`\n`,(0,t.jsx)(e.li,{children:\"Easier onboarding and training of new developers\"}),`\n`,(0,t.jsx)(e.li,{children:\"Flexibility for different rendering strategies (server, client, or static)\"}),`\n`,(0,t.jsx)(e.li,{children:\"Opinionated choices prevent bikeshedding\"}),`\n`,(0,t.jsx)(e.li,{children:\"Deploy anywhere and incrementally adopt\"}),`\n`,(0,t.jsx)(e.li,{children:\"It's still just React\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"But before we explore why you should use a framework, it's helpful to step back and look at the evolution of React.\"}),`\n`,(0,t.jsxs)(e.h2,{id:\"react-is-evolving\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#react-is-evolving\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"React is evolving\"]}),`\n`,(0,t.jsx)(e.p,{children:\"React changed how developers build for the web, popularizing breaking down UI into reusable components and emphasizing incremental adoption.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"While it's certainly still a library that can be \",(0,t.jsx)(e.a,{href:\"https://beta.reactjs.org/learn/add-react-to-a-website\",children:\"sprinkled into any webpage\"}),\", the \",(0,t.jsx)(e.strong,{children:\"React architecture\"}),\" is a blueprint for frameworks to follow to create interactive, resilient, and performant \",(0,t.jsx)(e.a,{href:\"https://github.com/reactwg/react-18/discussions/37\",children:\"frontend patterns\"}),\".\"]}),`\n`,(0,t.jsx)(r,{alt:\"React has evolved from a library to also provide an architecture for frameworks.\",src:\"/images/react-frameworks/evolving.jpg\",width:1456/2,height:819/2}),`\n`,(0,t.jsxs)(e.p,{children:[\"Consider \",(0,t.jsx)(e.a,{href:\"https://beta.nextjs.org/docs/rendering/server-and-client-components\",children:\"React Server Components\"}),\". This architecture is designed for frameworks to implement. Some aspects have been standardized between React frameworks (e.g. \",(0,t.jsx)(e.a,{href:\"https://github.com/reactjs/rfcs/pull/227\",children:'\"use client\"'}),\") and others are being incubated (e.g. \",(0,t.jsx)(e.a,{href:\"https://github.com/reactjs/rfcs/pull/229\",children:\"async/await in Server Components\"}),\") during \",(0,t.jsx)(e.a,{href:\"https://nextjs.org/blog/next-13#new-app-directory-beta\",children:\"beta periods\"}),\". Frameworks can still choose their own conventions (e.g. \",(0,t.jsx)(e.a,{href:\"https://beta.nextjs.org/docs/routing/fundamentals#special-files\",children:\"special filenames\"}),\").\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Implementing the React architecture, and ultimately great UI patterns, requires deep integration between all parts of your frontend: data fetching and loading states, code splitting and bundling, routing and rendering, and more.\"}),`\n`,(0,t.jsx)(e.p,{children:\"This is where frameworks come in.\"}),`\n`,(0,t.jsx)(i,{id:\"1585076899126345728\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsxs)(e.em,{children:[\"P.S. I talked about this evolution during the \",(0,t.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=XruemT74Nok&list=PLRvKvw42Rc7O0eWo2m_guXdZsGTEQM_jj\",children:\"Reactathon keynote\"}),\".\"]})}),`\n`,(0,t.jsxs)(e.h2,{id:\"less-time-connecting-tools-more-time-building-products\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#less-time-connecting-tools-more-time-building-products\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Less time connecting tools, more time building products\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"React has been around for almost \",(0,t.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/React_(JavaScript_library)\",children:\"10 years\"}),\" \\u2013 and the web has grown with it.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Every aspect of frontend development has seen innovation: linting, formatting, compiling, bundling, minifying, deploying, and more. Developers want to spend less time configuring their tooling and more time writing React code, while still taking advantage of these latest advancements.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Teams who build with React frameworks can focus on components and business logic, and lean on battle-tested open-source solutions for routing, rendering, data fetching, styling, authentication, testing, and more.\"}),`\n`,(0,t.jsx)(r,{alt:\"An iceberg of react frameworks, showing that while most of the time it seems it's just components and business logic, the reality is that under water there are many other things frameworks are handling for you, like authentication, rendering, routing, state management, i18n, styling, and more.\",src:\"/images/react-frameworks/iceberg.png\",width:2478/3,height:2784/3}),`\n`,(0,t.jsxs)(e.p,{children:[\"Further, teams can \",(0,t.jsx)(e.a,{href:\"https://vercel.com/blog/upgrading-nextjs-for-instant-performance-improvements\",children:\"update to the latest versions\"}),\" of these frameworks and instantly receive both performance benefits and new tools to help them improve the end-user experience. In some cases, you \",(0,t.jsx)(e.a,{href:\"https://twitter.com/leeerob/status/1607461222584291328\",children:\"add a command line flag\"}),\" and take advantage of multi-year and multi-million dollar investments into \",(0,t.jsx)(e.a,{href:\"https://leerob.io/blog/rust\",children:\"Rust-based JavaScript tooling\"}),\". It's harder to justify investments into developer experience and tooling when building an internal framework (for most teams).\"]}),`\n`,(0,t.jsxs)(e.h2,{id:\"easier-onboarding-and-training-of-new-developers\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#easier-onboarding-and-training-of-new-developers\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Easier onboarding and training of new developers\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Frameworks help you \",(0,t.jsx)(e.a,{href:\"https://twitter.com/getDanArias/status/1607727505217294341\",children:\"spend more time writing React code\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Compiling, bundling, minifying, code splitting, server-rendering, routing \\u2013 by using a framework, your team spends less time building and maintaining solutions that are solved problems.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"For example, \",(0,t.jsx)(e.a,{href:\"https://vercel.com/blog/migrating-a-large-open-source-react-application-to-next-js-and-vercel\",children:\"moving from React + Express + Webpack to a framework\"}),\" resulted in removing \",(0,t.jsx)(e.strong,{children:\"20,000+ lines of code\"}),\" and \",(0,t.jsx)(e.strong,{children:\"30+ dependencies\"}),\" \\u2013 while improving HMR (Hot Module Reloading) from \",(0,t.jsx)(e.strong,{children:\"1.3s to 131ms\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Companies who choose to build with open-source React frameworks benefit from:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Immediate knowledge ramp-up:\"}),\" New engineers can ship code on day one, bringing existing knowledge of popular frameworks from their last role or hobby projects.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Up-to-date documentation:\"}),\" When developers are stuck, they're able to reference documentation that's updated daily or \",(0,t.jsx)(e.a,{href:\"https://twitter.com/rauchg/status/1605997497976885248\",children:\"easily search Stack Overflow for their stack trace\"}),\"\\xB2.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Best-in-class security:\"}),\" Bugs and security vulnerabilities are reported and patched by communities of \",(0,t.jsx)(e.a,{href:\"https://twitter.com/rauchg/status/1604880119666905088\",children:\"thousands of developers\"}),\" instead of overworked platform teams.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Meta (the creators of React) have their own closed-source web framework. Many innovations in React have come from years of dogfooding new features (like \",(0,t.jsx)(e.a,{href:\"https://beta.nextjs.org/docs/rendering/server-and-client-components\",children:\"Server Components\"}),\") on \",(0,t.jsx)(e.a,{href:\"http://facebook.com/\",children:\"Facebook.com\"}),\" through this framework.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Using an open-source React framework, built on top of the latest React UI primitives, is the closest way to emulate the tools developers at Facebook use to build one of the largest web applications in the world.\"}),`\n`,(0,t.jsxs)(e.h2,{id:\"flexibility-for-different-rendering-strategies\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#flexibility-for-different-rendering-strategies\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Flexibility for different rendering strategies\"]}),`\n`,(0,t.jsx)(e.p,{children:\"React, by itself, is primarily used on the client (in the browser).\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In a standard React application, the browser receives an empty HTML shell from the server along with JavaScript instructions to construct the UI. This is called \",(0,t.jsx)(e.a,{href:\"https://nextjs.org/learn/foundations/how-nextjs-works/client-and-server\",children:\"client-side rendering\"}),\" because the initial rendering work happens on the user's device.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"While this is a valid pattern for certain types of applications (especially those behind a login), React's widespread usage for any type of web page made developers also want to \",(0,t.jsx)(e.a,{href:\"https://nextjs.org/learn/foundations/how-nextjs-works/rendering\",children:\"prerender\"}),\" content from the server. The HTML is generated in advance rather than computed on the user's device.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Sending HTML from the server (or how most sites work) can provide some benefits:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"It's typically faster to do expensive work on a powerful server than on a user's device.\"}),`\n`,(0,t.jsx)(e.li,{children:\"It's a better user experience to see more content on the initial paint versus a loading spinner.\"}),`\n`,(0,t.jsx)(e.li,{children:\"It's a better user experience when running A/B tests or experiments, preventing layout shifts.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"React does give you \",(0,t.jsx)(e.a,{href:\"https://beta.reactjs.org/reference/react-dom/server/renderToPipeableStream\",children:\"APIs to render content to HTML\"}),\", which might work for your use case. However, the developer is still left with connecting many pieces together for the rest of the application experience. This is where frameworks provide a cohesive experience on top of React when you need to prerender content.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"It might sound like all React apps should be server-rendered. The reality is, of course, more nuanced. For certain routes, it's likely better to generate a static asset and distribute it around the world using an \",(0,t.jsx)(e.a,{href:\"https://vercel.com/docs/concepts/edge-network/overview\",children:\"Edge Network\"}),\" (placing the assets closer to your users).\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"For other pages, the client-only model might be better. You can download the JavaScript for the page \",(0,t.jsx)(e.em,{children:\"once\"}),\", cache the assets on the device (which have a unique hash in the file name for the given version), and then quickly navigate between pages (giving you the single-page application feel). This might be a better solution for applications that require offline support.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"There's no silver bullet or single rendering strategy that works. Static, server, or client rendered \\u2013 all are valid options depending on the requirements. Frameworks can empower you to make this decision on a per-route basis, rather than needing to make the \",(0,t.jsx)(e.em,{children:\"entire\"}),\" application a static site or server-rendered.\"]}),`\n`,(0,t.jsxs)(e.h2,{id:\"opinionated-choices-prevent-bikeshedding\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#opinionated-choices-prevent-bikeshedding\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Opinionated choices prevent bikeshedding\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Picking React is \",(0,t.jsx)(e.strong,{children:\"one decision\"}),\" of \",(0,t.jsx)(e.em,{children:\"many\"}),\" frontend architecture choices.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"You will likely also need to consider:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"How should we handle routing? (i.e. using the file system or through some configuration)\"}),`\n`,(0,t.jsx)(e.li,{children:\"How should we only load the JavaScript needed for the current page? (i.e. code splitting)\"}),`\n`,(0,t.jsx)(e.li,{children:\"How should we prevent regressions in our codebase? (e.g. using conformance and linting)\"}),`\n`,(0,t.jsx)(e.li,{children:\"How should we load data for a given page? (i.e. server or client)\"}),`\n`,(0,t.jsx)(e.li,{children:\"How should we deploy our React application? (e.g. using Docker, Node.js, or static files)\"}),`\n`,(0,t.jsx)(e.li,{children:\"How should we style our code? (e.g. CSS modules, Tailwind CSS, etc.)\"}),`\n`,(0,t.jsx)(e.li,{children:\"How should we handle authentication?\"}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Frameworks make many of these decisions for you, as well as provide you with tools and components to solve common problems on the web. For example, you will probably need to use \",(0,t.jsx)(e.a,{href:\"https://nextjs.org/docs/basic-features/image-optimization\",children:\"images\"}),\", \",(0,t.jsx)(e.a,{href:\"https://nextjs.org/docs/basic-features/font-optimization\",children:\"fonts\"}),\", or \",(0,t.jsx)(e.a,{href:\"https://nextjs.org/docs/basic-features/script\",children:\"third-party scripts\"}),\" when building a website. Frameworks can give you tools to help optimize your usage of these primitives, building on top of \",(0,t.jsx)(e.a,{href:\"https://leerob.substack.com/p/why-im-optimistic-about-javascripts\",children:\"React, JavaScript, and the web platform\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Building with an open-source framework that's well adopted gives you access to many contributors creating, maintaining, and documenting common issues \\u2013 codifying them into conformance rules and \",(0,t.jsx)(e.a,{href:\"https://nextjs.org/docs/basic-features/eslint#eslint-config\",children:\"ESLint configurations\"}),\". There are sometimes even suggestions built into common web performance measurement tools like \",(0,t.jsx)(e.a,{href:\"https://twitter.com/leeerob/status/1506332606371086338\",children:\"Lighthouse\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"It's important for frameworks to be opinionated, but still have ways to eject or give access to the underlying primitives to allow developers to not feel a loss of control. For example, maybe this is a \",(0,t.jsx)(e.a,{href:\"https://github.com/vitejs/awesome-vite#plugins\",children:\"robust plugin system\"}),\", or maybe this is running \",(0,t.jsx)(e.a,{href:\"https://nextjs.org/docs/advanced-features/middleware\",children:\"arbitrary routing logic before each request\"}),\".\"]}),`\n`,(0,t.jsxs)(e.h2,{id:\"deploy-anywhere-and-incrementally-adopt\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#deploy-anywhere-and-incrementally-adopt\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Deploy anywhere and incrementally adopt\"]}),`\n`,(0,t.jsx)(e.p,{children:\"It's not uncommon to have internal platform teams supporting the delivery of bespoke React applications at larger companies. Since their tooling is not built on established, open platforms, developers often end up wasting time working on solved infrastructure problems.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"One of the benefits of using a framework is that they all have support for either self-hosting on your own infrastructure (either through Docker, Node.js, or other means like uploading static assets) or by using \",(0,t.jsx)(e.a,{href:\"https://twitter.com/leeerob/status/1583529921153900545\",children:\"managed platforms\"}),\", which automate every process of the \",(0,t.jsx)(e.a,{href:\"https://techcrunch.com/2022/12/20/vercel-makes-it-easier-to-collaborate-on-preview-deployments\",children:\"iteration\"}),\" and delivery of the software.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Additionally, many React frameworks have extensive documentation on how to incrementally adopt their tool, including providing low-level features like \",(0,t.jsx)(e.a,{href:\"https://nextjs.org/docs/advanced-features/middleware\",children:\"URL proxies\"}),\", allowing you to rewrite some incoming requests to your new framework to your existing application.\"]}),`\n`,(0,t.jsxs)(e.h2,{id:\"its-still-just-react\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#its-still-just-react\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"It's still just React\"]}),`\n`,(0,t.jsx)(e.p,{children:\"While frameworks provide abstractions and opinionated choices, at the end of the day, you spend the majority of your time writing React code. And that React code is portable between other React-based frameworks. This optionality is great for developers.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Further, React frameworks are increasingly aligned with the \",(0,t.jsx)(e.a,{href:\"https://leerob.substack.com/p/why-im-optimistic-about-javascripts\",children:\"web platform\"}),\". As patterns for building React applications have emerged and solidified, we're now seeing stronger recommendations from both the \",(0,t.jsx)(e.a,{href:\"https://beta.reactjs.org/\",children:\"official React documentation\"}),\", as well as frameworks and libraries in the community.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"While the innovation in the React and single-page application space has been abundant, we're now seeing frameworks use the best of the client, and the best of the server, all while taking full advantage of the web platform.\"}),`\n`,(0,t.jsxs)(e.h2,{id:\"conclusion\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#conclusion\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Conclusion\"]}),`\n`,(0,t.jsx)(e.p,{children:\"React has evolved. It's now a:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Library:\"}),\" Sprinkle interactivity into any webpage\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Architecture:\"}),\" UI patterns and primitives for frameworks to build with\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Community:\"}),\" Well used and documented, incrementally adoptable\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Ecosystem:\"}),\" Learn once, write everywhere (web, \",(0,t.jsx)(e.a,{href:\"https://reactnative.dev/\",children:\"native\"}),\", \",(0,t.jsx)(e.a,{href:\"https://docs.pmnd.rs/react-three-fiber/getting-started/introduction\",children:\"3D\"}),\", and more)\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"If you're building with React, \",(0,t.jsx)(e.strong,{children:\"you should probably use a framework\"}),\" to spend more time writing product code, and less time connecting toolchains. The specific framework you use doesn't matter as much as the benefits from not reinventing the wheel building your own.\"]}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\xB9: The two React frameworks in the 6% were Next.js and Gatsby. There are other React frameworks, but these were the only detected (looking at \",(0,t.jsx)(e.code,{children:\"__next\"}),\" element for Next.js and \",(0,t.jsx)(e.code,{children:\"___gatsby\"}),\" for Gatsby) in the top 10,000. Also, side note, Next.js \",(0,t.jsx)(e.a,{href:\"https://twitter.com/github_tracker/status/1610165503468658689\",children:\"has passed CRA\"}),\" now.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\xB2: Or you can use ChatGPT (ironically \",(0,t.jsx)(e.a,{href:\"https://twitter.com/rauchg/status/1598440645680828416\",children:\"built with Next.js\"}),\") to \",(0,t.jsx)(e.a,{href:\"https://twitter.com/leeerob/status/1598738172879437824\",children:\"generate a React site\"}),\" entirely with AI.\"]})]})}function R(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var x=R;function d(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return y(j);})();\n;return Component;"
  },
  "_id": "react-frameworks.mdx",
  "_raw": {
    "sourceFilePath": "react-frameworks.mdx",
    "sourceFileName": "react-frameworks.mdx",
    "sourceFileDir": ".",
    "contentType": "mdx",
    "flattenedPath": "react-frameworks"
  },
  "type": "Blog",
  "slug": "react-frameworks",
  "tweetIds": [
    "1604880119666905088",
    "1585076899126345728"
  ],
  "structuredData": {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": "Why You Should Use a React Framework",
    "datePublished": "2023-01-05",
    "dateModified": "2023-01-05",
    "description": "And spend more time writing React code.",
    "image": "https://homescree.net/og?title=Why You Should Use a React Framework",
    "url": "https://homescree.net/blog/react-frameworks",
    "author": {
      "@type": "Person",
      "name": "Matthew Guo"
    }
  }
}