{
  "title": "Community-Messaging Fit",
  "publishedAt": "2023-03-07",
  "summary": "Community-messaging fit is when you've found the right description of the product that connects with the majority of your community.",
  "body": {
    "raw": "\nFor startups, having product-market fit means you're building the right product for the right people. For DevRel, having community-messaging fit means you're using the right words to describe the product for that community.\n\nThis post will outline a few examples of how I've found community-messaging fit and some tips to help you iterate with your messaging.\n\n## What is Community-Messaging Fit?\n\nMarketing to developers should be **clear** and **relatable**.\n\n- **Clear**—_not_ simple. The product often isn't simple, but the impact can be clear. If your explanation isn't clear yet, iterate and try again.\n- **Relatable**—_not_ obscure. Use language or analogies the community is familiar with. Connect new concepts with existing technologies or mental models.\n\nYour community members have unique backgrounds. They've learned to code from university, bootcamps, or are self-taught. They started with C, or PHP, or Python, or JavaScript. Different descriptions of your product will connect with groups of the community.\n\n**Community-messaging fit is when you've found the right description of the product that connects with the majority of your community.**\n\nFinding your fit isn't a one-time process. Your product will evolve and your community will grow. You have to be constantly iterating on the right messaging.\n\n## Finding Community-Messaging Fit\n\nTwo good indicators for community-messaging fit are **virality** and **sharability**.\n\nDevelopers _want_ to share good content. When they've learned something new, or found a new way to explain a topic they're interested in, they will voluntarily amplify to their audience. When they have a “lightbulb moment”, they want to share this excitement.\n\nWhen the topic is explained clearly, and it relates back to things the developer understands, it makes it easily sharable. This is how virality happens.\n\n<Image\n  alt={`How virality happens from sharing a clear, relatable message`}\n  src={`/images/cmf/virality.png`}\n  width={2084 / 2}\n  height={802 / 2}\n/>\n\n## Examples\n\n### Next.js Middleware\n\nSince many Next.js developers have prior experience with Node.js and Express, I found that relating [Next.js Middleware](https://nextjs.org/docs/advanced-features/middleware) to Express Middleware helped it connect better with the community.\n\nSimilar to how you can “stack” Express Middleware to augment parts of the routing stack, the Next.js Middleware function can be composed from a `Request` and eventually produce a `Response`.\n\nI've now landed on: Middleware gives you complete control over routing in Next.js. This description can be dialed up or down depending on the audience.\n\n### Edge Runtime\n\nThe first iteration of describing the [Edge Runtime](https://vercel.com/docs/concepts/functions/edge-functions/edge-runtime) was a set of APIs that works in the browser, server, and on edge computing platforms like Vercel. Unfortunately, the name “edge” is also commonly used to refer to compute or data being globally distributed at _every_ network edge.\n\nThe benefits of edge _compute_ were clear: they have no cold boots, are cost effective, and are extremely scalable. But that “edge” word still implied globally replicated. The best performance comes from co-locating your compute with your data. Feedback from the community showed that data was not usually globally replicated. So where should your “edge” compute run? Likely [regionally](https://vercel.com/blog/regional-execution-for-ultra-low-latency-rendering-at-the-edge).\n\nEdge was being used for both the _runtime_ as well as the _location_. This understanding led to an evolution of how I talked about the product. For the fastest performance, you want compute that runs close to your data, using a _light_ runtime. This light runtime is a _subset_ of Node.js APIs.\n\n## Keep on iterating\n\nCommunity-messaging fit is never finished because your community is ever-evolving.\n\nYou take the input (questions, objections) and iterate towards the new output (analogies, clarifications). If you're not seeing virality, keep tweaking the message until it's clear and relatable. Build an inventory of analogies and examples to help connect the dots with the community.\n\nLet me know if you have good examples of clear, relatable descriptions of developer products, and _why_ they're impactful for their community.\n",
    "code": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var i in e)r(t,i,{get:e[i],enumerable:!0})},s=(t,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!p.call(t,o)&&o!==i&&r(t,o,{get:()=>e[o],enumerable:!(a=m(e,o))||a.enumerable});return t};var w=(t,e,i)=>(i=t!=null?d(g(t)):{},s(e||!t||!t.__esModule?r(i,\"default\",{value:t,enumerable:!0}):i,t)),b=t=>s(r({},\"__esModule\",{value:!0}),t);var c=f((T,l)=>{l.exports=_jsx_runtime});var N={};y(N,{default:()=>k,frontmatter:()=>v});var n=w(c()),v={title:\"Community-Messaging Fit\",publishedAt:\"2023-03-07\",summary:\"Community-messaging fit is when you've found the right description of the product that connects with the majority of your community.\"};function h(t){let e=Object.assign({p:\"p\",h2:\"h2\",a:\"a\",span:\"span\",strong:\"strong\",ul:\"ul\",li:\"li\",em:\"em\",h3:\"h3\",code:\"code\"},t.components),{Image:i}=e;return i||j(\"Image\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"For startups, having product-market fit means you're building the right product for the right people. For DevRel, having community-messaging fit means you're using the right words to describe the product for that community.\"}),`\n`,(0,n.jsx)(e.p,{children:\"This post will outline a few examples of how I've found community-messaging fit and some tips to help you iterate with your messaging.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"what-is-community-messaging-fit\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-is-community-messaging-fit\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What is Community-Messaging Fit?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Marketing to developers should be \",(0,n.jsx)(e.strong,{children:\"clear\"}),\" and \",(0,n.jsx)(e.strong,{children:\"relatable\"}),\".\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Clear\"}),\"\\u2014\",(0,n.jsx)(e.em,{children:\"not\"}),\" simple. The product often isn't simple, but the impact can be clear. If your explanation isn't clear yet, iterate and try again.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Relatable\"}),\"\\u2014\",(0,n.jsx)(e.em,{children:\"not\"}),\" obscure. Use language or analogies the community is familiar with. Connect new concepts with existing technologies or mental models.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Your community members have unique backgrounds. They've learned to code from university, bootcamps, or are self-taught. They started with C, or PHP, or Python, or JavaScript. Different descriptions of your product will connect with groups of the community.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Community-messaging fit is when you've found the right description of the product that connects with the majority of your community.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Finding your fit isn't a one-time process. Your product will evolve and your community will grow. You have to be constantly iterating on the right messaging.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"finding-community-messaging-fit\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#finding-community-messaging-fit\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Finding Community-Messaging Fit\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Two good indicators for community-messaging fit are \",(0,n.jsx)(e.strong,{children:\"virality\"}),\" and \",(0,n.jsx)(e.strong,{children:\"sharability\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Developers \",(0,n.jsx)(e.em,{children:\"want\"}),\" to share good content. When they've learned something new, or found a new way to explain a topic they're interested in, they will voluntarily amplify to their audience. When they have a \\u201Clightbulb moment\\u201D, they want to share this excitement.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"When the topic is explained clearly, and it relates back to things the developer understands, it makes it easily sharable. This is how virality happens.\"}),`\n`,(0,n.jsx)(i,{alt:\"How virality happens from sharing a clear, relatable message\",src:\"/images/cmf/virality.png\",width:2084/2,height:802/2}),`\n`,(0,n.jsxs)(e.h2,{id:\"examples\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#examples\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Examples\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"nextjs-middleware\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#nextjs-middleware\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Next.js Middleware\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since many Next.js developers have prior experience with Node.js and Express, I found that relating \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/advanced-features/middleware\",children:\"Next.js Middleware\"}),\" to Express Middleware helped it connect better with the community.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Similar to how you can \\u201Cstack\\u201D Express Middleware to augment parts of the routing stack, the Next.js Middleware function can be composed from a \",(0,n.jsx)(e.code,{children:\"Request\"}),\" and eventually produce a \",(0,n.jsx)(e.code,{children:\"Response\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"I've now landed on: Middleware gives you complete control over routing in Next.js. This description can be dialed up or down depending on the audience.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"edge-runtime\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#edge-runtime\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Edge Runtime\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The first iteration of describing the \",(0,n.jsx)(e.a,{href:\"https://vercel.com/docs/concepts/functions/edge-functions/edge-runtime\",children:\"Edge Runtime\"}),\" was a set of APIs that works in the browser, server, and on edge computing platforms like Vercel. Unfortunately, the name \\u201Cedge\\u201D is also commonly used to refer to compute or data being globally distributed at \",(0,n.jsx)(e.em,{children:\"every\"}),\" network edge.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The benefits of edge \",(0,n.jsx)(e.em,{children:\"compute\"}),\" were clear: they have no cold boots, are cost effective, and are extremely scalable. But that \\u201Cedge\\u201D word still implied globally replicated. The best performance comes from co-locating your compute with your data. Feedback from the community showed that data was not usually globally replicated. So where should your \\u201Cedge\\u201D compute run? Likely \",(0,n.jsx)(e.a,{href:\"https://vercel.com/blog/regional-execution-for-ultra-low-latency-rendering-at-the-edge\",children:\"regionally\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Edge was being used for both the \",(0,n.jsx)(e.em,{children:\"runtime\"}),\" as well as the \",(0,n.jsx)(e.em,{children:\"location\"}),\". This understanding led to an evolution of how I talked about the product. For the fastest performance, you want compute that runs close to your data, using a \",(0,n.jsx)(e.em,{children:\"light\"}),\" runtime. This light runtime is a \",(0,n.jsx)(e.em,{children:\"subset\"}),\" of Node.js APIs.\"]}),`\n`,(0,n.jsxs)(e.h2,{id:\"keep-on-iterating\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#keep-on-iterating\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Keep on iterating\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Community-messaging fit is never finished because your community is ever-evolving.\"}),`\n`,(0,n.jsx)(e.p,{children:\"You take the input (questions, objections) and iterate towards the new output (analogies, clarifications). If you're not seeing virality, keep tweaking the message until it's clear and relatable. Build an inventory of analogies and examples to help connect the dots with the community.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let me know if you have good examples of clear, relatable descriptions of developer products, and \",(0,n.jsx)(e.em,{children:\"why\"}),\" they're impactful for their community.\"]})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var k=x;function j(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return b(N);})();\n;return Component;"
  },
  "_id": "community-messaging-fit.mdx",
  "_raw": {
    "sourceFilePath": "community-messaging-fit.mdx",
    "sourceFileName": "community-messaging-fit.mdx",
    "sourceFileDir": ".",
    "contentType": "mdx",
    "flattenedPath": "community-messaging-fit"
  },
  "type": "Blog",
  "slug": "community-messaging-fit",
  "tweetIds": [],
  "structuredData": {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": "Community-Messaging Fit",
    "datePublished": "2023-03-07",
    "dateModified": "2023-03-07",
    "description": "Community-messaging fit is when you've found the right description of the product that connects with the majority of your community.",
    "image": "https://homescree.net/og?title=Community-Messaging Fit",
    "url": "https://homescree.net/blog/community-messaging-fit",
    "author": {
      "@type": "Person",
      "name": "Matthew Guo"
    }
  }
}